/*globals define*/
/*jshint node:true, browser:true*/

/**
 * Generated by PluginGenerator 1.7.0 from webgme on Wed Oct 19 2016 17:26:51 GMT-0500 (Central Daylight Time).
 * A plugin that inherits from the PluginBase. To see source code documentation about available
 * properties and methods visit %host%/docs/source/PluginBase.html.
 */

define([
    'plugin/PluginConfig',
    'text!./metadata.json',
    'plugin/PluginBase'
], function (
    PluginConfig,
    pluginMetadata,
    PluginBase) {
    'use strict';

    pluginMetadata = JSON.parse(pluginMetadata);

    /**
     * Initializes a new instance of MiniProject2.
     * @class
     * @augments {PluginBase}
     * @classdesc This class represents the plugin MiniProject2.
     * @constructor
     */
    var MiniProject2 = function () {
        // Call base class' constructor.
        PluginBase.call(this);
        this.pluginMetadata = pluginMetadata;
    };

    /**
     * Metadata associated with the plugin. Contains id, name, version, description, icon, configStructue etc.
     * This is also available at the instance at this.pluginMetadata.
     * @type {object}
     */
    MiniProject2.metadata = pluginMetadata;

    // Prototypical inheritance from PluginBase.
    MiniProject2.prototype = Object.create(PluginBase.prototype);
    MiniProject2.prototype.constructor = MiniProject2;

    /**
     * Main function for the plugin to execute. This will perform the execution.
     * Notes:
     * - Always log with the provided logger.[error,warning,info,debug].
     * - Do NOT put any user interaction logic UI, etc. inside this method.
     * - callback always has to be called even if error happened.
     *
     * @param {function(string, plugin.PluginResult)} callback - the result callback
     */
    MiniProject2.prototype.main = function (callback) {
        // Use self to access core, project, result, logger etc from PluginBase.
        // These are all instantiated at this point.
        var self = this,
            nodeObject,
            artifact;



        nodeObject = self.activeNode;

        // (1)
        //self.core.setAttribute(nodeObject, 'name', 'My new obj');
        //self.core.setRegistry(nodeObject, 'position', {x: 70, y: 70});

        self.metaNodeInfo = [];
        // (2)
        self.loadNodeMap(self.rootNode)
            .then(function (nodes) {
                var jsonModel = self.buildProjectStructure(self.rootNode, nodes);
                self.logger.info(JSON.stringify(jsonModel, null, 4));
                return self.generateArtifact(jsonModel, self.metaNodeInfo);
            })
            .then(function (artifactHash) {
                self.result.addArtifact(artifactHash);
                self.result.setSuccess(true);
                callback(null, self.result);
            })
            .catch(function (err) {
                // (3)
                self.logger.error(err.stack);
                // Result success is false at invocation.
                callback(err, self.result);
            });

    };

    MiniProject2.prototype.loadNodeMap = function (node) {
        var self = this;
        return self.core.loadSubTree(node)
            .then(function (nodeArr) {
                var nodes = {},
                    i;
                for (i = 0; i < nodeArr.length; i += 1) {
                    nodes[self.core.getPath(nodeArr[i])] = nodeArr[i];
                }

                return nodes;
            });
    };


    MiniProject2.prototype.buildProjectStructure = function (root,nodes) {
        var self = this,
            childrenPath,
            childNode,
            i,
            metaNode,
            isMetaNode,
            Path,
            metaPath,
            name,
            base_node,
            isConnection = false,
            src,
            dst,
            connectStr = '';

        childrenPath = self.core.getChildrenPaths(root);

        // check if meta node
        name = self.core.getAttribute(root, 'name');
        metaNode = self.getMetaType(root);

        base_node = self.core.getPointerPath(root, 'base');
        if (base_node !== null) {
            base_node = self.core.getAttribute(nodes[base_node], 'name');
        }
        else
            base_node = "null";
        metaPath = self.core.getPath(metaNode);
        Path = self.core.getPath(root);
        isMetaNode = (metaPath === Path);

        // check if connection node
        src = self.core.getPointerPath(root, 'src');
        dst = self.core.getPointerPath(root, 'dst');
        if (src && dst) {
            isConnection = true;
            //src = nodes[src];
            //dst = nodes[dst];
            //src = self.core.getAttribute(src, "name");
            //dst = self.core.getAttribute(dst, "name");
            //connectStr = src + " --> " + dst;
        }

        var jsonModel = {};
        //jsonModel.name = name;
        var metanode = self.core.getBaseType(root);
        var isRoot = false;
        var nameMetaType = "";
        var attributeNames;
        var model;
        var i;

        if (metanode)
            nameMetaType = self.core.getAttribute(metanode, 'name');
        else
            isRoot = true;

        if (!isRoot) {
            //jsonModel.isMeta = isMetaNode;
            //jsonModel.metaType = nameMetaType;

            if (isMetaNode) {
                self.metaNodeInfo.push({
                    name: name,
                    path: Path,
                    nbrOfChildren: childrenPath.length,
                    base: base_node
                });
            }
        }
        if (!isConnection) {
			jsonModel.name = name;
			jsonModel.metaType = nameMetaType;
            //attributeNames = self.core.getAttributeNames(root);
           // for (i = 0; i < attributeNames.length; i++) {
               // jsonModel[attributeNames[i]] = self.core.getAttribute(root, attributeNames[i]);
            //}
            //jsonModel.src = src;

            //jsonModel.dst = dst;
        /* }
        else { */
            attributeNames = self.core.getAttributeNames(root);
            for (i = 0; i < attributeNames.length; i++) {
                jsonModel[attributeNames[i]] = self.core.getAttribute(root, attributeNames[i]);
            }
            jsonModel.children = {};
            for (i = 0; i < childrenPath.length; i++) {
                childNode = nodes[childrenPath[i]];
                model = self.buildProjectStructure(childNode, nodes);
                var relPath = self.core.getRelid(childNode);
                jsonModel.children[relPath] = model;
            }
        }

        return jsonModel;
    };


    MiniProject2.prototype.generateArtifact = function (tree, meta) {
        var self = this,
            Q = require('q'),
            deferred = Q.defer(),
            language,
            artifact,
            filesToAdd = {},
            codeFileName,
            batchFileName;

        artifact = self.blobClient.createArtifact('Project-Data');
        filesToAdd['Tree.json'] = JSON.stringify(tree, null, 4);
        filesToAdd['Meta.json'] = JSON.stringify(meta, null, 4);

        artifact.addFiles(filesToAdd, function (err) {
            if (err) {
                deferred.reject(new Error(err));
                return;
            }
            self.blobClient.saveAllArtifacts(function (err, hashes) {
                if (err) {
                    deferred.reject(new Error(err));
                    return;
                }

                deferred.resolve(hashes[0]);
            });
        });

        return deferred.promise;
    };


    return MiniProject2;
});

